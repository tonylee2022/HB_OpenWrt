name: X86_64 OpenWrt deploy VPS

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
      - name: Check Server Performance
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y update
          sudo -E apt-get -y install $(curl -fsSL https://raw.githubusercontent.com/tonylee2022/openwrt_d/main/depends_ubuntu_2204.txt)
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get -y clean
          sudo timedatectl set-timezone "$TZ"

      - name: Combine Disks
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 1024
          temp-reserve-mb: 100
          root-reserve-mb: 1024

      - name: Checkout
        uses: actions/checkout@main

      - name: Clone Source Code
        run: |
          df -hT $GITHUB_WORKSPACE
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          # git checkout 9a4a9252051253a5a0271ecd41d95d3830c33305  ##修改lede版本
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
          COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
          echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
          COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

      - name: Generate Variables
        run: |
          cp $CONFIG_FILE $OPENWRT_PATH/.config
          cd $OPENWRT_PATH
          make defconfig > /dev/null 2>&1
          SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          DEFAULT_VERSION=$(awk '/VERSION_NUMBER:=\$\(if/{gsub(/.*,/,""); gsub(/\).*/,""); print}' "./include/version.mk")
          echo "DEFAULT_VERSION=$DEFAULT_VERSION" >> $GITHUB_ENV

      - name: Cache Toolchain
        if: env.CACHE_TOOLCHAIN == 'true'
        uses: HiGarfield/cachewrtbuild@main
        with:
          ccache: false
          mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          prefix: ${{ env.OPENWRT_PATH }}

      - name: Install Feeds
        run: |
          cd $OPENWRT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files $OPENWRT_PATH/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
          chmod +x $GITHUB_WORKSPACE/scripts/*.sh
          chmod +x $DIY_SCRIPT
          cd $OPENWRT_PATH
          $GITHUB_WORKSPACE/$DIY_SCRIPT
          # $GITHUB_WORKSPACE/scripts/preset-clash-core.sh $CLASH_KERNEL
          $GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh
          # $GITHUB_WORKSPACE/scripts/preset-adguard-core.sh $CLASH_KERNEL

      - name: Download DL Package
        run: |
          cd $OPENWRT_PATH
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Firmware
        id: compile
        run: |
          cd $OPENWRT_PATH
          mkdir -p files/etc/uci-defaults
          cp $GITHUB_WORKSPACE/scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DATE=$(date +"%Y-%m-%d %H")" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y.%m.%d.%H")" >> $GITHUB_ENV

      - name: Check Space Usage
        if: (!cancelled())
        run: df -hT

      - name: Generate recursive index.html
        run: |
          #!/usr/bin/env bash
          set -e
          cd $OPENWRT_PATH/bin
          # 设置变量
          find . -type d | while read dir; do
            cd "$dir"
            title_name=$(basename "$PWD")
            echo '<!DOCTYPE html><html><head><meta charset="UTF-8"><title>'"$title_name"'</title></head><body><h1>Index of /'"$dir"'</h1><hr><pre><a href="../index.html">../</a>' > index.html
            for f in *; do
              [ "$f" != "index.html" ] && \
              if [ -d "$f" ]; then
                # 对于目录，链接长度与文件名长度一致
                printf '<a href="%s/index.html">%s/</a>                                                  -\n' "$f" "$f" >> index.html
              else
                size=$(stat -c %s "$f")
                mod_time=$(stat -c %y "$f" | cut -d' ' -f1 | cut -d'-' -f1-2 | tr '-' '/')$(stat -c %y "$f" | cut -d' ' -f2 | cut -d':' -f1-2)
                # 计算文件名长度
                f_len=${#f}
                # 如果文件名长度超过50，截断并用>表示
                if [ $f_len -gt 50 ]; then
                  f_display=${f:0:49}'>'
                  padding=''
                else
                  f_display=$f
                  # 计算需要填充的空格数
                  padding=$(printf '%*s' $((50 - f_len)) '')
                fi
                # 打印文件信息，确保日期列对齐
                printf '<a href="%s">%s</a>%s %-15s %15d\n' "$f" "$f_display" "$padding" "$mod_time" "$size" >> index.html
              fi
            done
            echo '</pre><hr></body></html>' >> index.html
            cd - >/dev/null
          done
          # 显示目录结构
          echo "当前 bin 目录结构："
          tree "$OPENWRT_PATH/bin" || ls -R "$OPENWRT_PATH/bin"

      # 步骤4：设置 SSH 密钥用于同步到 VPS
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      # 步骤5：使用 rsync 同步 bin 目录到 VPS
      - name: Sync bin directory to VPS
        run: |
          rsync -avz --progress -e "ssh -i ~/.ssh/id_rsa" $OPENWRT_PATH/bin/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_TARGET_DIR }}/${{ env.DEFAULT_VERSION }}/
          # 可选：同步后在 VPS 上调整权限
          ssh -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "sudo chown -R www-data:www-data ${{ secrets.VPS_TARGET_DIR }} && sudo chmod -R 755 ${{ secrets.VPS_TARGET_DIR }}"

      - name: Notify on Compile Status
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            编译状态 ${{ job.status }}!
            工作流: ${{ github.workflow }}
            用户名: ${{ github.actor }}
            仓库: ${{ github.repository }}
            固件源码: ${{ env.REPO_URL }}
            源码分支: ${{ env.REPO_BRANCH }}
            OpenWrt源码: ${{ env.DEFAULT_VERSION }}
            Commit: ${{ github.sha }}
            编译完成，发布到 VPS！
